// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Image {
    id                     String                @id @default(cuid())
    filename               String
    bucketName             String
    publicUrl              String?
    gcsUri                 String?
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt
    salary                 Salary?
    LongRunningOperation   LongRunningOperation? @relation(fields: [longRunningOperationId], references: [id])
    longRunningOperationId String?
}

model LongRunningOperation {
    id      String  @id @default(cuid())
    // these come from google cloud's long running operation directly
    lroName String  @unique
    lroId   String  @unique
    // every operation can have anywhere from 1 to many images
    images  Image[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // every operation have anywhere from 1 to many results
    documentProcessResults DocumentProcessResult[]
}

model DocumentProcessResult {
    id String @id @default(cuid())

    filename   String
    bucketName String
    publicUrl  String

    fileContent  Json
    textResponse Json

    longRunningOperationId String?
    longRunningOperation   LongRunningOperation? @relation(fields: [longRunningOperationId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum SalaryStatus {
    NEW
    CONFIRMED
}

model Salary {
    id String @id @default(cuid())

    data   Json
    // The salary data is only confirmed after the user copies to clipboard
    status SalaryStatus @default(NEW)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // salary data has a 1:1 relationship with Image
    imageId String @unique
    image   Image  @relation(fields: [imageId], references: [id])
}
